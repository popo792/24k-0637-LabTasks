#include <iostream>
using namespace std;

void bubbleSort(int arr[], int n, int &c) {
    c = 0;
    for (int i = 0; i < n - 1; i++)
        for (int j = 0; j < n - i - 1; j++) {
            c++;
            if (arr[j] > arr[j + 1]) {
                int t = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = t;
            }
        }
}

void insertionSort(int arr[], int n, int &c) {
    c = 0;
    for (int i = 1; i < n; i++) {
        int key = arr[i], j = i - 1;
        while (j >= 0) {
            c++;
            if (arr[j] > key) {
                arr[j + 1] = arr[j];
                j--;
            } else break;
        }
        arr[j + 1] = key;
    }
}

void selectionSort(int arr[], int n, int &c) {
    c = 0;
    for (int i = 0; i < n - 1; i++) {
        int minIndex = i;
        for (int j = i + 1; j < n; j++) {
            c++;
            if (arr[j] < arr[minIndex]) minIndex = j;
        }
        int t = arr[i];
        arr[i] = arr[minIndex];
        arr[minIndex] = t;
    }
}

void shellSort(int arr[], int n, int &c) {
    c = 0;
    for (int gap = n / 2; gap > 0; gap /= 2)
        for (int i = gap; i < n; i++) {
            int temp = arr[i], j;
            for (j = i; j >= gap; j -= gap) {
                c++;
                if (arr[j - gap] > temp) arr[j] = arr[j - gap];
                else break;
            }
            arr[j] = temp;
        }
}

void display(int arr[], int n) {
    for (int i = 0; i < n; i++) cout << arr[i] << " ";
    cout << endl;
}

int main() {
    int n;
    cin >> n;
    int arr[n];
    for (int i = 0; i < n; i++) cin >> arr[i];

    int a1[n], a2[n], a3[n], a4[n];
    for (int i = 0; i < n; i++) {
        a1[i] = arr[i];
        a2[i] = arr[i];
        a3[i] = arr[i];
        a4[i] = arr[i];
    }

    int c;
    bubbleSort(a1, n, c); display(a1, n); cout << c << endl;
    insertionSort(a2, n, c); display(a2, n); cout << c << endl;
    selectionSort(a3, n, c); display(a3, n); cout << c << endl;
    shellSort(a4, n, c); display(a4, n); cout << c << endl;
}
